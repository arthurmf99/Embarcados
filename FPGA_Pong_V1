// ====================================================================
// ==    PONG COM VARIACOES - V1.9 PARA FPGA (SEM LOOPS FOR)       ==
// ====================================================================
#define _DEFAULT_SOURCE // Necessario para usleep em alguns compiladores
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <time.h>

// --- DEFINICOES DE HARDWARE (FPGA) ---
#define HW_REGS_BASE 0xFF200000
#define HW_REGS_SPAN 0x00010000
#define FRAME_BASE   0xC8000000
#define FRAME_SPAN   (512 * 240 * 2)

#define VGA_VISIBLE_WIDTH   320
#define VGA_VISIBLE_HEIGHT  240
#define VGA_MEMORY_WIDTH    512

// Offsets
#define HEX3_0_OFFSET 0x20
#define KEY_OFFSET    0x50

// --- DEFINICOES DE JOGO ---
#define BLACK 0x0000
#define WHITE 0xFFFF
#define RED   0xF800
#define GREEN 0x07E0
#define F_BITS 8
#define GAME_VARIATIONS_COUNT 3
#define FRAMES_PER_SECOND 60
#define TRANSITION_TICKS_PER_SECOND 30
#define MODE_SWITCH_INTERVAL (5 * FRAMES_PER_SECOND)
#define RESTART_DELAY (3 * FRAMES_PER_SECOND)
#define TRANSITION_INTERVAL (3 * TRANSITION_TICKS_PER_SECOND)

// --- ESTADOS DO JOGO ---
typedef enum {
    STATE_PLAYING,
    STATE_TRANSITION,
    STATE_GAME_OVER
} PlayState;

// --- ESTRUTURAS DE DADOS ---
typedef struct {
    int x, y, vx, vy, w, h;
} GameObject;

struct GameVariation;

typedef struct {
    GameObject ball;
    GameObject player1;
    GameObject player2;
    int rebounds;
    int mode_timer;
    int transition_timer;
    int current_variation_index;
    const struct GameVariation* current_variation;
    PlayState play_state;
    uint16_t ball_color;
} GameState;

typedef struct GameVariation {
    const char* name;
    const char* description;
    void (*init)(GameState* state);
    void (*update)(GameState* state, unsigned int keys);
    int (*check_defeat)(GameState* state);
} GameVariation;


// --- PROTOTIPOS ---
void hal_draw_rect(int x, int y, int w, int h, uint16_t color);
void hal_draw_string(const char* str, int x, int y, int scale, uint16_t color);
void hal_update_score(int score);
unsigned int hal_read_keys();
void itoa_simple(int value, char* buffer);
void variation_standard_init(GameState* state);
void variation_standard_update(GameState* state, unsigned int keys);
int  variation_standard_check_defeat(GameState* state);
void variation_inverted_update(GameState* state, unsigned int keys);
void variation_lava_init(GameState* state);
void variation_lava_update(GameState* state, unsigned int keys);
int  variation_lava_check_defeat(GameState* state);
void reset_game(GameState* state);
void load_next_variation(GameState* state);

// --- VARIAVEIS GLOBAIS DE HARDWARE ---
int fd_mem = -1;
void *virtual_base_lw = NULL;
void *virtual_base_vga = NULL;
volatile unsigned int *hex_ptr = NULL;
volatile unsigned int *key_ptr = NULL;
volatile uint16_t (*vga_screen_ptr)[VGA_MEMORY_WIDTH] = NULL;

const unsigned char seven_seg_digits[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};

const GameVariation game_variations[GAME_VARIATIONS_COUNT] = {
    { "JOGO PADRAO", "O sorvete de baunilha dos jogos", &variation_standard_init, &variation_standard_update, &variation_standard_check_defeat },
    { "CONTROLES INVERTIDOS", "Esquerda vira direita", &variation_standard_init, &variation_inverted_update, &variation_standard_check_defeat },
    { "A BOLA EH LAVA", "Nao a deixe tocar em voce", &variation_lava_init, &variation_lava_update, &variation_lava_check_defeat }
};

const unsigned char font[96][5] = {
    [' '-0x20] = {0x00, 0x00, 0x00, 0x00, 0x00},
    ['0'-0x20] = {0x3E, 0x51, 0x49, 0x45, 0x3E}, ['1'-0x20] = {0x00, 0x42, 0x7F, 0x40, 0x00},
    ['2'-0x20] = {0x42, 0x61, 0x51, 0x49, 0x46}, ['3'-0x20] = {0x21, 0x41, 0x45, 0x4B, 0x31},
    ['4'-0x20] = {0x18, 0x14, 0x12, 0x7F, 0x10}, ['5'-0x20] = {0x27, 0x45, 0x45, 0x45, 0x39},
    ['6'-0x20] = {0x3C, 0x4A, 0x49, 0x49, 0x30}, ['7'-0x20] = {0x01, 0x71, 0x09, 0x05, 0x03},
    ['8'-0x20] = {0x36, 0x49, 0x49, 0x49, 0x36}, ['9'-0x20] = {0x06, 0x49, 0x49, 0x29, 0x1E},
    ['A'-0x20] = {0x7F, 0x09, 0x09, 0x09, 0x7F}, ['B'-0x20] = {0x7F, 0x49, 0x49, 0x49, 0x36},
    ['C'-0x20] = {0x3E, 0x41, 0x41, 0x41, 0x22}, ['D'-0x20] = {0x7F, 0x41, 0x41, 0x22, 0x1C},
    ['E'-0x20] = {0x7F, 0x49, 0x49, 0x49, 0x41}, ['F'-0x20] = {0x7F, 0x09, 0x09, 0x01, 0x01},
    ['G'-0x20] = {0x3E, 0x41, 0x49, 0x49, 0x7A}, ['H'-0x20] = {0x7F, 0x08, 0x08, 0x08, 0x7F},
    ['I'-0x20] = {0x00, 0x41, 0x7F, 0x41, 0x00}, ['J'-0x20] = {0x20, 0x40, 0x40, 0x40, 0x3F},
    ['K'-0x20] = {0x7F, 0x08, 0x14, 0x22, 0x41}, ['L'-0x20] = {0x7F, 0x40, 0x40, 0x40, 0x40},
    ['M'-0x20] = {0x7F, 0x02, 0x0C, 0x02, 0x7F}, ['N'-0x20] = {0x7F, 0x04, 0x08, 0x10, 0x7F},
    ['O'-0x20] = {0x3E, 0x41, 0x41, 0x41, 0x3E}, ['P'-0x20] = {0x7F, 0x09, 0x09, 0x09, 0x06},
    ['Q'-0x20] = {0x3E, 0x41, 0x51, 0x21, 0x5E}, ['R'-0x20] = {0x7F, 0x09, 0x19, 0x29, 0x46},
    ['S'-0x20] = {0x46, 0x49, 0x49, 0x49, 0x31}, ['T'-0x20] = {0x01, 0x01, 0x7F, 0x01, 0x01},
    ['U'-0x20] = {0x3F, 0x40, 0x40, 0x40, 0x3F}, ['V'-0x20] = {0x1F, 0x20, 0x40, 0x20, 0x1F},
    ['W'-0x20] = {0x3F, 0x40, 0x38, 0x40, 0x3F}, ['X'-0x20] = {0x63, 0x14, 0x08, 0x14, 0x63},
    ['Y'-0x20] = {0x07, 0x08, 0x70, 0x08, 0x07}, ['Z'-0x20] = {0x61, 0x51, 0x49, 0x45, 0x43}
};

// ====================================================================
// --- INICIALIZACAO E LIMPEZA DE HARDWARE ---
// ====================================================================

void cleanup_hardware() {
    if (virtual_base_lw) munmap(virtual_base_lw, HW_REGS_SPAN);
    if (virtual_base_vga) munmap(virtual_base_vga, FRAME_SPAN);
    if (fd_mem != -1) close(fd_mem);
}

int init_hardware() {
    fd_mem = open("/dev/mem", O_RDWR | O_SYNC);
    if (fd_mem == -1) {
        perror("ERROR: could not open /dev/mem...");
        return 1;
    }
    virtual_base_lw = mmap(NULL, HW_REGS_SPAN, PROT_READ | PROT_WRITE, MAP_SHARED, fd_mem, HW_REGS_BASE);
    if (virtual_base_lw == MAP_FAILED) {
        perror("ERROR: mmap() for virtual_base_lw failed...");
        close(fd_mem);
        return 1;
    }
    hex_ptr = (volatile unsigned int *)(virtual_base_lw + HEX3_0_OFFSET);
    key_ptr = (volatile unsigned int *)(virtual_base_lw + KEY_OFFSET);
    virtual_base_vga = mmap(NULL, FRAME_SPAN, PROT_READ | PROT_WRITE, MAP_SHARED, fd_mem, FRAME_BASE);
    if (virtual_base_vga == MAP_FAILED) {
        perror("ERROR: mmap() for virtual_base_vga failed...");
        cleanup_hardware();
        return 1;
    }
    vga_screen_ptr = (volatile uint16_t (*)[VGA_MEMORY_WIDTH]) virtual_base_vga;
    atexit(cleanup_hardware);
    return 0;
}

// ====================================================================
// --- IMPLEMENTACAO DAS FUNCOES HAL (COM LOOPS WHILE) ---
// ====================================================================

void hal_draw_rect(int x_fix, int y_fix, int w, int h, uint16_t color) {
    int x = x_fix >> F_BITS;
    int y = y_fix >> F_BITS;
    int row = y;
    while (row < y + h) {
        int col = x;
        while (col < x + w) {
            if (col >= 0 && col < VGA_VISIBLE_WIDTH && row >= 0 && row < VGA_VISIBLE_HEIGHT) {
                vga_screen_ptr[row][col] = color;
            }
            col++;
        }
        row++;
    }
}

void hal_draw_char(char c, int x, int y, int scale, uint16_t color) {
    if (c < 0x20 || c > 0x7E) return;
    const unsigned char* glyph = font[c - 0x20];
    int i = 0;
    while (i < 7) {
        int j = 0;
        while (j < 5) {
            if ((glyph[j] >> i) & 1) {
                hal_draw_rect((x + j * scale) << F_BITS, (y + i * scale) << F_BITS, scale, scale, color);
            }
            j++;
        }
        i++;
    }
}

void hal_draw_string(const char* str, int x, int y, int scale, uint16_t color) {
    int offset = 0;
    while (*str) {
        char c = *str;
        if (c >= 'a' && c <= 'z') c = c - 'a' + 'A';
        hal_draw_char(c, x + offset, y, scale, color);
        offset += (5 * scale + scale);
        str++;
    }
}

void hal_update_score(int score) {
    unsigned char d1 = seven_seg_digits[(score / 10) % 10];
    unsigned char d0 = seven_seg_digits[score % 10];
    *hex_ptr = (d1 << 8) | d0;
}

unsigned int hal_read_keys() { return *key_ptr; }

void itoa_simple(int value, char* buffer) {
    if (value == 0) { buffer[0] = '0'; buffer[1] = '\0'; return; }
    int i = 0;
    int start = i;
    while (value > 0) {
        buffer[i++] = (value % 10) + '0';
        value /= 10;
    }
    buffer[i] = '\0';
    int end = i - 1;
    while (start < end) {
        char temp = buffer[start];
        buffer[start] = buffer[end];
        buffer[end] = temp;
        start++;
        end--;
    }
}

// --- IMPLEMENTACAO DAS VARIACOES (sem alteracao) ---
void variation_standard_init(GameState* state) { state->ball_color = WHITE; }
void variation_standard_update(GameState* state, unsigned int keys) {
    int player_speed = 2 << F_BITS;
    if ((keys & 0b0010) && ((state->player1.x >> F_BITS) > 0)) state->player1.x -= player_speed;
    if ((keys & 0b0001) && (((state->player1.x + (state->player1.w << F_BITS)) >> F_BITS) < VGA_VISIBLE_WIDTH)) state->player1.x += player_speed;
    if ((keys & 0b1000) && ((state->player2.x >> F_BITS) > 0)) state->player2.x -= player_speed;
    if ((keys & 0b0100) && (((state->player2.x + (state->player2.w << F_BITS)) >> F_BITS) < VGA_VISIBLE_WIDTH)) state->player2.x += player_speed;
    state->ball.x += state->ball.vx; state->ball.y += state->ball.vy;
    int ball_x = state->ball.x >> F_BITS, ball_y = state->ball.y >> F_BITS;
    if (ball_x <= 0 || ball_x + state->ball.w >= VGA_VISIBLE_WIDTH) state->ball.vx *= -1;
    int p1_x = state->player1.x >> F_BITS, p1_y = state->player1.y >> F_BITS;
    if (ball_y < p1_y + state->player1.h && ball_y > p1_y && ball_x > p1_x && ball_x < p1_x + state->player1.w) {
        state->ball.vy *= -1; state->ball.y = (state->player1.y + (state->player1.h << F_BITS)); state->rebounds++;
    }
    int p2_x = state->player2.x >> F_BITS, p2_y = state->player2.y >> F_BITS;
    if (ball_y + state->ball.h > p2_y && ball_y < p2_y && ball_x > p2_x && ball_x < p2_x + state->player2.w) {
        state->ball.vy *= -1; state->ball.y = (state->player2.y - (state->ball.h << F_BITS)); state->rebounds++;
    }
}
int variation_standard_check_defeat(GameState* state) {
    int ball_y = state->ball.y >> F_BITS;
    return (ball_y < 0 || ball_y + state->ball.h > VGA_VISIBLE_HEIGHT);
}
void variation_inverted_update(GameState* state, unsigned int keys) {
    int player_speed = 2 << F_BITS;
    if ((keys & 0b0001) && ((state->player1.x >> F_BITS) > 0)) state->player1.x -= player_speed;
    if ((keys & 0b0010) && (((state->player1.x + (state->player1.w << F_BITS)) >> F_BITS) < VGA_VISIBLE_WIDTH)) state->player1.x += player_speed;
    if ((keys & 0b0100) && ((state->player2.x >> F_BITS) > 0)) state->player2.x -= player_speed;
    if ((keys & 0b1000) && (((state->player2.x + (state->player2.w << F_BITS)) >> F_BITS) < VGA_VISIBLE_WIDTH)) state->player2.x += player_speed;
    state->ball.x += state->ball.vx; state->ball.y += state->ball.vy;
    int ball_x = state->ball.x >> F_BITS, ball_y = state->ball.y >> F_BITS;
    if (ball_x <= 0 || ball_x + state->ball.w >= VGA_VISIBLE_WIDTH) state->ball.vx *= -1;
    int p1_x = state->player1.x >> F_BITS, p1_y = state->player1.y >> F_BITS;
    if (ball_y < p1_y + state->player1.h && ball_y > p1_y && ball_x > p1_x && ball_x < p1_x + state->player1.w) {
        state->ball.vy *= -1; state->ball.y = (state->player1.y + (state->player1.h << F_BITS)); state->rebounds++;
    }
    int p2_x = state->player2.x >> F_BITS, p2_y = state->player2.y >> F_BITS;
    if (ball_y + state->ball.h > p2_y && ball_y < p2_y && ball_x > p2_x && ball_x < p2_x + state->player2.w) {
        state->ball.vy *= -1; state->ball.y = (state->player2.y - (state->ball.h << F_BITS)); state->rebounds++;
    }
}
void variation_lava_init(GameState* state) { state->ball_color = RED; }
void variation_lava_update(GameState* state, unsigned int keys) {
    int player_speed = 2 << F_BITS;
    if ((keys & 0b0010) && ((state->player1.x >> F_BITS) > 0)) state->player1.x -= player_speed;
    if ((keys & 0b0001) && (((state->player1.x + (state->player1.w << F_BITS)) >> F_BITS) < VGA_VISIBLE_WIDTH)) state->player1.x += player_speed;
    if ((keys & 0b1000) && ((state->player2.x >> F_BITS) > 0)) state->player2.x -= player_speed;
    if ((keys & 0b0100) && (((state->player2.x + (state->player2.w << F_BITS)) >> F_BITS) < VGA_VISIBLE_WIDTH)) state->player2.x += player_speed;
    state->ball.x += state->ball.vx; state->ball.y += state->ball.vy;
    int ball_x = state->ball.x >> F_BITS, ball_y = state->ball.y >> F_BITS;
    if (ball_x <= 0 || ball_x + state->ball.w >= VGA_VISIBLE_WIDTH) state->ball.vx *= -1;
    if (ball_y <= 0 || ball_y + state->ball.h >= VGA_VISIBLE_HEIGHT) {
        state->ball.vy *= -1;
        state->rebounds++;
    }
}
int variation_lava_check_defeat(GameState* state) {
    int ball_x = state->ball.x >> F_BITS, ball_y = state->ball.y >> F_BITS;
    int p1_x = state->player1.x >> F_BITS, p1_y = state->player1.y >> F_BITS;
    if (ball_x < p1_x + state->player1.w && ball_x + state->ball.w > p1_x && ball_y < p1_y + state->player1.h && ball_y + state->ball.h > p1_y) return 1;
    int p2_x = state->player2.x >> F_BITS, p2_y = state->player2.y >> F_BITS;
    if (ball_x < p2_x + state->player2.w && ball_x + state->ball.w > p2_x && ball_y < p2_y + state->player2.h && ball_y + state->ball.h > p2_y) return 1;
    return 0;
}

// --- LOGICA DE ESTADO DO JOGO ---
void reset_game_positions(GameState* state) {
    state->player1.w = 40; state->player1.h = 5;
    state->player1.x = (VGA_VISIBLE_WIDTH / 2 - state->player1.w / 2) << F_BITS;
    state->player1.y = 10 << F_BITS;
    state->player2.w = 40; state->player2.h = 5;
    state->player2.x = (VGA_VISIBLE_WIDTH / 2 - state->player2.w / 2) << F_BITS;
    state->player2.y = (VGA_VISIBLE_HEIGHT - 10 - state->player2.h) << F_BITS;
    state->ball.w = 6; state->ball.h = 6;
    state->ball.x = (VGA_VISIBLE_WIDTH / 2 - state->ball.w / 2) << F_BITS;
    state->ball.y = (VGA_VISIBLE_HEIGHT / 2 - state->ball.h / 2) << F_BITS;
    state->ball.vx = (1 << F_BITS) + (1 << (F_BITS - 1));
    state->ball.vy = (1 << F_BITS);
    if (rand() % 2) state->ball.vx *= -1;
    if (rand() % 2) state->ball.vy *= -1;
}

void load_next_variation(GameState* state) {
    state->current_variation_index = (state->current_variation_index + 1) % GAME_VARIATIONS_COUNT;
    state->current_variation = &game_variations[state->current_variation_index];
    state->play_state = STATE_TRANSITION;
    state->transition_timer = TRANSITION_INTERVAL;
    hal_draw_rect(0, 0, VGA_VISIBLE_WIDTH, VGA_VISIBLE_HEIGHT, BLACK);
    if (state->current_variation->init != NULL) {
        state->current_variation->init(state);
    }
}

void show_game_over_screen(GameState* state) {
    hal_draw_rect(0, 0, VGA_VISIBLE_WIDTH, VGA_VISIBLE_HEIGHT, BLACK);
    hal_draw_string("GAME OVER", 60, 60, 4, RED);
    char score_str[4];
    itoa_simple(state->rebounds, score_str);
    hal_draw_string(score_str, 140, 120, 3, WHITE);
    hal_draw_string("APERTE QUALQUER TECLA", 40, 180, 2, WHITE);
    hal_draw_string("PARA REINICIAR", 80, 200, 2, WHITE);
    hal_update_score(state->rebounds);
}

void reset_game(GameState* state) {
    reset_game_positions(state);
    state->rebounds = 0;
    state->current_variation_index = -1;
    load_next_variation(state);
}

// --- FUNCOES DE ESTADO PARA O LOOP PRINCIPAL ---
void handle_playing_state(GameState* state) {
    hal_draw_rect(state->player1.x, state->player1.y, state->player1.w, state->player1.h, BLACK);
    hal_draw_rect(state->player2.x, state->player2.y, state->player2.w, state->player2.h, BLACK);
    hal_draw_rect(state->ball.x, state->ball.y, state->ball.w, state->ball.h, BLACK);
    
    unsigned int keys = hal_read_keys();
    state->current_variation->update(state, keys);
    
    hal_draw_rect(state->player1.x, state->player1.y, state->player1.w, state->player1.h, WHITE);
    hal_draw_rect(state->player2.x, state->player2.y, state->player2.w, state->player2.h, WHITE);
    hal_draw_rect(state->ball.x, state->ball.y, state->ball.w, state->ball.h, state->ball_color);
    hal_update_score(state->rebounds);
    
    if (state->current_variation->check_defeat(state)) {
        state->play_state = STATE_GAME_OVER;
        state->transition_timer = RESTART_DELAY;
        show_game_over_screen(state);
        return;
    }
    
    state->mode_timer--;
    if (state->mode_timer <= 0) {
        load_next_variation(state);
    }
}

void handle_transition_state(GameState* state) {
    hal_draw_rect(0, 0, VGA_VISIBLE_WIDTH, VGA_VISIBLE_HEIGHT, BLACK);
    hal_draw_string(state->current_variation->name, 40, 60, 2, GREEN);
    hal_draw_string(state->current_variation->description, 20, 95, 1, WHITE);

    int countdown = (state->transition_timer / TRANSITION_TICKS_PER_SECOND) + 1;
    char count_str[2];
    itoa_simple(countdown, count_str);
    hal_draw_string(count_str, 150, 150, 5, WHITE);

    state->transition_timer--;
    if (state->transition_timer <= 0) {
        state->play_state = STATE_PLAYING;
        state->mode_timer = MODE_SWITCH_INTERVAL;
        hal_draw_rect(0, 0, VGA_VISIBLE_WIDTH, VGA_VISIBLE_HEIGHT, BLACK);
    }
}

void handle_game_over_state(GameState* state) {
    if (state->transition_timer > 0) {
        state->transition_timer--;
    } else {
        if (hal_read_keys() != 0) {
            reset_game(state);
        }
    }
}

int main() {
    if (init_hardware() != 0) {
        return 1;
    }
    
    GameState game;
    reset_game(&game);
    
    while(1) {
        switch(game.play_state) {
            case STATE_PLAYING:
                handle_playing_state(&game);
                break;
            case STATE_TRANSITION:
                handle_transition_state(&game);
                break;
            case STATE_GAME_OVER:
                handle_game_over_state(&game);
                break;
        }
        usleep(1000000 / FRAMES_PER_SECOND);
    }
    return 0;
}
